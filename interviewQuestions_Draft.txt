need to extract the names of employees which starts with characters "Su" or any string. Assume the query string coming from UI fields. 
(it should be case insensitive )



stream.

.filter(w in list(w.startwith()))
.foreach(list<>)


public class Program
{
        static int a = 4;
        int b = 3;       
        public static void main(String[] args)
        {
            a = 10;
            b = 20;	  
	}
}

find the max salaried employee from list of employees  (Salary is a column in Employee table)

select max(e.salary) from t_employee e



ArrayList LastnameList = new ArrayList<>();

LastnameList = studentList.stream.filter(s1 -> s1.getLastname()).collect(Collector.toList());


String name = "Sayeedul";

Sysout.name.reverse();


employee(ed_id) , dept(d_id)

select * from t_emp e, t_dept d 
where d.d_id = e.ed_id


















e1.stream.filter(x -> x.name).collect(collectors.tolist().System(out::println))



public class Example {
    public static void main(String[] args)
    {
        String[] a = new String[10];
        String upcase = a[1].toUpperCase();
        System.out.print(upcase);
    }
}

customer

select count(*) from t_employee where 



-------------------------------------------------
String s1 = "hello world";
String s2 = "hello world";
String s3 = new String("hello world");
String s4 = new String("hello world");


    List<Employee> employeeList;

    public class Employee {​​

    Integer empId;
    String name;
    String gender;
    String role;
    Long salary;

String grade;

}​​


empMale = employeeList.stream.filter(e1 -> e1.getGender('M')).Collector(collect.toList());

empFemale = employeeList.stream.filter(e1 -> e1.getGender('F')).Collector(collect.toList());


Map<String, List<Employee>>


------------------------------------------------------------------------------------------------
nums



duplicateRemoved = nums.stream.removeDuplicate(x -> !(contains(x))).collect(Collectors.toList());

Sysout(duplicateRemoved);



sortedList = empList.stream.sorted((e1,e2) -> compareTo((Integer)e1.getAge()- (Interger)e2.getAge)).collect(Collectors.toList());

------------------------------------------------------------------------------------------------

for(i = 0 ; i<n; i++)
{
   for (j = 0 ; j<i ; j++)
{
   
 if(a[i] != a[j])
   a.add(i)
    
}
}



----------------------------------------------------------------------------------------------------

iterator.


numbers.stream.filter(x -> x%2== 1).forEac   collect(Colletor.toList());

number.stream.frequency(count>1);



class A implements Interface1{

A objA = new A();


A.default1();

}


----------------------------
String s1 = "Hello World";

String reversed = new StringBuilder(s1).reverse().toString();


List<Integer> list = Arrays.asList(9,2,2,7,6,6,5,7);
Find duplicate elements using java8
Output: {2=2, 5=1, .....}




 Map(int,int) Freq =   list.stream.collect(Collector.groupingBy(list,count())).toMap();





------------------

Array int[] nums = new list.of(3,4,7,8,2);

set 

for(int i ; nums.length; i++){


 for(int j = 0; j<11; j++){

    if(nums[i] != j){


}

}

} 

empList.stream.filter(e1 -> e1.getAge()> 55).map(e1 ->e1.getSalary()  );



select min(e.salry) from t_employee e

order by e.salary desc

limit(6); 

---------------------------------------------------------------------------
List<Integer> integers = Arrays.asList(2, 9, 10, 8, 4, 7, 7,9,8);




 = integers.stream.filter(e -> (e%2 == 0)).collect(Collectores.toList());



int count = 0;

Hasmap<Integer, Integer>  freq = new Hasmap<Integr, Integer>();

for(int i = 0; i<integer.length; i++){

  
  

}

---------------------------------------------------------------------------------
public class InterviewbitTest {


 private static int counter = 0; 



void InterviewbitTest() { 
counter = 20; } 


InterviewbitTest(int x){ 
counter = x; } 







public static void main(String[] args) { 

InterviewbitTest interviewbitTest = new InterviewbitTest();

 System.out.println(counter); }


 }






Class Singleton{

  Singleton instance = null;



 private Sinletonton(){


}


  private Singleton getInstance(){

       

        if(instance != null) {  


       synchronised(Singleton.class){

          if(instance != null){
          Singlton instance = new Singleton();
     }

      }  

        

       }
  
}

}

------------------------------------------------------------------------
you have numbers 1-100 . Write a code to pull out even numbers from them and store it in a new list using Streams API





evenList= list.stream.filter(n -> n%2 == 0 ).collect(Collector.toList());



table : Census 
City            State        Population 
Banaglore Karnataka 2 cr 
 Managlore Karnatka 2 cr 
 Mysore Karnatka 3 cr 
 Noida UP 4 cr 


The names of state having total population more than 4 cr


select state,sum(c.population) from Census c having c.population > 4cr

group by State



200
400
404
500
502



--------------------------------------------------------------------------------
empList.stream.filter({e1 -> e1.getCity()-> "kolkata"} ).collect(Collection.toList());


emp(eid,ename,deptid,salary)
dept(deptId, dname)


select max(e.salary) from emp e, dept d 
where d.deptid = e.deptid
group by e.deptid;



---------------------------------------------------------------------------------------



String str = "madm"; 
Given string is palindrome or not


String str = "madm"; 

str.tochar();

for(int i = 0 ; i< str.length; i++; int j =  str.length; i<0)



try(){ } 
catch(Exception ex){} 
catch(NullPointerExceptio ex){}


try(){ return 0; } 
catch(Exception ex) 
{ return 1;}
finally{(return 3);}



[14:51] Ravikumar Baare
List<Employee> employeeList = Arrays.asList(new Employee(111, "Kumar", 32, "Female", "HR", 2011, 25000.0)),
new Employee(122, "Paul", 25, "Male", "Sales And Marketing", 2015, 13500.0)),
new Employee(133, "Raju", 29, "Male", "Infrastructure", 2012, 18000.0)),
new Employee(144, "Murali", 28, "Male", "Product Development", 2014, 32500.0)),
new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0)),
new Employee(177, "Manu ", 35, "Male", "Account And Finance", 2010, 27000.0)),
new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0)),
new Employee(200, "Rajesh", 38, "Male", "Security And Transport", 2015, 11000.5)),
new Employee(233, "Jyothi", 27, "Female", "Account And Finance", 2013, 21300.0)),
new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0)),
new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0)));



MaleEmpList = employeeList.stream.filter(e -> e.getGender()= "Male").Collect(Collector.toList());

FemaleEmpList = employeeList.stream.filter(e -> e.getGender()= "Female").Collect(Collector.toList());


DeptSet = employeeList.stream.map(e -> e.getDept()).Collect(Collector.toSet());


--------------------------------------------------------------------------------------

"select * from" || "T_policy"



list.stream.filter(l -> list.frequency(l,1)>0).

-----------------------------------------------------------------------------


class Singleton{


 Singleton obj = null;


   private Singleton(){

  }


 if(obj == null){


    sysnchronized{
    Singleton obj = new Singleton();
}

  }

}




listUptaed=list.stream.filter(x -> x.getPrice()  > 5000).map(x -> x.getname()).collect(Colletion.toList());



create table product(id primary key, product name)


insert into product(id primary key, product name)
values
(1, "HOC");


update product  

set id = 2

where productid = 1;

------------------------------------------------------------------
Write a program to print below pattern
0000*
000*0
00*00
0*000
*0000



for(int i = 5; i<0 ; i++){

for()

sysout("0");


}



----------------------------------------------------------------------------

list.stream.Collection(n, frequency>1).



static class CustomRunnable implements Runnable {
		
		public void run() {
			int i = (int)(Math.random() * 1000);
			try {
				Thread.sleep((long)(Math.random() * 10000));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println(Thread.currentThread().getName() + ":" + i);
		}
	}




public static void main(String[] args) throws InterruptedException {
		Thread[] threadArray = new Thread[10];
		for(int i=0; i<10; i++) {
			threadArray[i] = new Thread(new CustomRunnable());
			threadArray[i].start();
		}
		for(int i=0; i<10; i++) {
			threadArray[i].join();
		}
	}



threadArray[0]--Random
threadArray[1]




nput: [] -> Output Ok
       [[]] -> Output ok
       [{{}] -> Output Incorrect
[{[}]] - this is incorrect


for(i =0 ; i< input.lentth; i++){


stack[i] = input[i]
if( (input[i] == "{" and input[i+1] = "}")  or (input[i] = "[" and input[i+1] = "]"))

}




list name salary

list.stream.map(e -> e.getSalary()).Collection.avg



HashMap m = new Map();
m.add( e1,e1);
m.add (e1, e2);
SOP (m.length);


------------------------------------------------------------------

class A {

 public mathod1(arg1, args2){

  ...
}

int a = 5;

public b()
}


class B extends A{

public mathod1(arg1, args2){

  ...
}

public method2(args1, args2){
...
}

public method2(args1){

}

int a = 10;

 
}


B b = new b(); 

b.method2(a);

b.method1();

b.a

  






public class Test {
    public static void foo() {
        System.out.println("Test.foo() called ");
    }
    public void foo() { 
        System.out.println("Test.foo(int) called ");
    }
    public static void main(String args[]) {
        Test.foo();
    }
}













public class Bird {
    private String name;
    private static int number;

 

    Bird(String name)
    {
        this.name = name;
        number++;
    }

 

    public int getNumber()
    {
        return number;
    }

 

}

class GFG {
    public static void main(String args[])
    {
        Bird b1 = new Bird("Parrot");
        Bird b2 = new Bird("Sparrow");
        Bird b3 = new Bird("Pigeon");

 

        System.out.println(b1.getNumber());
    }
}






>>
1
12
123
1234


class PrintPattern{

int count= 5;

for(int i= 0 ; i< count; i++){

sysout(range(i,i+1));
}




String str1="Hello";  
String str2="hello";  
           String str3=new String("Hello");  
           System.out.println(str1==str2);//false
              System.out.println(str1==str3);//false
           System.out.println(str1.equals(str3));//true





Class Singleton{

Singleton obj = null;

private Singleton(){

}

if(obj == null){

 synchronized{
  
  if(obj == null)
   
  Singleton obj = new singleton();
  
}

}

}












}

------------------------------------------------------------------------
@functional interface

InterfaceName{

public static method1(){
....
}

default method1(){
....
}

default mewthod2(){
...
}

abstract method1()

}


(String name = "Hasan";return name;){
}

[12:22] Arudra Anil Kumar




findAny()


findFirst()




Write a Java Program to reverse a string without using String inbuilt function

class ReverseString{

public static void main(string args[]){

String str = "Hyderabad";
String reverse = "";

char arr = str.toChar();

for(int i = arr.length() ; i<0; i--)

reverse = reverse+ arr[i];

return reverse;

}

}

}

blocking que

[12:38] Arudra Anil Kumar



Spring Boot Starters?


---------------------------------
import java.io.*;    

class Parent{   

  void msg() {  
    System.out.println("parent method");  
    }    
}    

public class TestExceptionChild extends Parent{ 

  void msg() throws IOException {    
    System.out.println("Child Method");    
  }  

  public static void main(String args[]) {   
 
       Parent p = new TestExceptionChild();    
       try {
        p.msg();
       } catch (Exception e) {        
        e.printStackTrace();
       }    
      }   
} 

--------------------------

public class Test {

 

 public void msg(String s) {

 System.out.println("String");

 }

 

 public void msg(StringBuffer sb){

 System.out.println("StringBuffer");

 }

 

 public static void main(String[] args) {

      new Test().msg(null);

}

 

}

---------------------------------------


//Find duplicate characters in a given string

import java.util.HashMap;
import java.util.Map;

public class DuplicateChar {

    public static void main(String args[]){

        
        //
        //"Ravikumar is  a software engineer"
        //
        //like a=4

        String str = "Ravikumar is  a software engineer";
        int count;

        char[] array = str.toCharArray();

        Map<Character,Integer> map = new HashMap<>();

        for(int i= 0; i<array.length; i++){

            map.put(array[i]);
        }

    }
}




//Reverse a String
package net.javaguides.springboot.controller;

public class ReverseString {

    public static void main(String args[]){

        String str = "Ravikumar";
        char[] array = str.toCharArray();
        String reverse = "";

        for(int i =  array.length; i< 0; i--){

            reverse += array[i];
        }

       // reverse.toString();
        System.out.println(reverse);
    }
}

---------------------------------------------------------------------

create table t_policy(pol_id number primary key, pol_holder varchar2(100), pol_number varchar2(100)); 

create table t_policy_detail(pol_dtl_id number primary key, pol_id forign key(t_policy.pol_id) , pol_holder varchar2(100), pol_number varchar2(100)); 



select * from t_policy p, left join t_policy_detail pd 
where p.pol_id = pd.pol_id


select the average salary for all employee for the year 2021 
where the table employee_salary column are id number,name varchar , empid varchar,salary numberic, month_sal string, year varchar


select avg(s.salary) from employee_salary s 
where s.year = 2021


functional interface CustomInterface1{

  public static method1();
  public static method2(){
     //body of method
   };

 default method3(){};
 default method4(){};
}

class a implements CustomInterface1{
 
   method1(x ->x*x)

}



List<Integer> l1 = new ArrayList<Integer>();

 l1 = As

l1.stream.





create bean factory
invoke the method of the bean


@Bean
public class  BeanCreation{

  public method1(){
   //body
    }

}


@ComponentScan(com.BeanCreationclass)
public class InvokeBean{

@Autowired



}


@Qaulifier("Class1.class")



-----------------------------------------------------------------------------
[09:56] Madhab Chandra Pal
    What is the output of the following program?

public class Base
{​​

void method(int a)
{​​
System.out.println("Base class method called with integer a = "+a);
}​​
void method(double d)
{​​
System.out.println("Base class method called with double d ="+d);
}​​
}​​


class Derived extends Base
{​​
@Override
void method(double d)
{​​
System.out.println("Derived class method called with double d ="+d);
}​​
}​​
public class Main
{​​
public static void main(String[] args)
{​​
new Derived().method(10);
}​​
}​​

Derived class method called with double d = 10


























































































































































































